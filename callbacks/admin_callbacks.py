import sqlite3
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from utils.states import AddCategory, AddLot
from keyboards.inline import (AdminHandler, RemoveItems,
                              setup_cut_mk, admin_mk ,setup_lot_mk,clear_state_mk, back_mk,
                              smart_builder)

router = Router()
con = sqlite3.connect("database.db")
cur = con.cursor()

@router.callback_query(AdminHandler.filter(F.value == "category"))
async def setup_categories(query: CallbackQuery, callback_data: AdminHandler, state: FSMContext):
    if callback_data.action == "add":
        await state.set_state(AddCategory.title)
        await query.message.answer("‚ûï –í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó:", reply_markup=clear_state_mk)
        await query.answer()
    elif callback_data.action == "remove":
        await query.message.edit_text("–í–∏–±–µ—Ä—ñ—Ç—å —è–∫—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –≤–∏–¥–∞–ª–∏—Ç–∏:", reply_markup=smart_builder(type="category", action="remove", back_type=1))
    elif callback_data.action == "list":
        await query.message.edit_text("–°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π:", reply_markup=smart_builder(type="category", action="list", back_type=1))
    else:
        await query.message.edit_text("–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=setup_cut_mk)

@router.message(AddCategory.title)
async def add_category(message: Message, state: FSMContext):
    cur.execute("INSERT INTO categories (title) VALUES (?)", (message.text,))
    con.commit()
    await message.answer(f"–ö–∞—Ç–µ–≥–æ—Ä—ñ—é <b>{message.text}</b> –¥–æ–¥–∞–Ω–æ!", reply_markup=back_mk)
    await state.clear()

@router.callback_query(RemoveItems.filter(F.type == "category"))
async def remove_category(query: CallbackQuery, callback_data: AdminHandler):
    remove_id = callback_data.id
    cur.execute("DELETE FROM categories WHERE id = ?", (remove_id,))
    con.commit()
    await query.message.edit_text("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è –≤–∏–¥–∞–ª–µ–Ω–∞", reply_markup=back_mk)

@router.callback_query(AdminHandler.filter(F.value == "lots"))
async def setup_lots(query: CallbackQuery, callback_data: AdminHandler, state: FSMContext):
    if callback_data.action == "add":
        await state.set_state(AddLot.title)
        await query.message.answer("‚ûï –í–≤–µ–¥—ñ—Ç—å <b>–Ω–∞–∑–≤—É</b> —Ç–æ–≤–∞—Ä—É:", reply_markup=clear_state_mk)
        await query.answer()
    elif callback_data.action == "remove":
        await query.message.edit_text("–í–∏–±–µ—Ä—ñ—Ç—å <b>–∫–∞—Ç–µ–≥—Ä—ñ—é</b>, –≤ —è–∫—ñ–π –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è <b>—Ç–æ–≤–∞—Ä</b>, —è–∫–∏–π –ø–æ—Ç—Ä—ñ–±–Ω–æ <b>–≤–∏–¥–∞–ª–∏—Ç–∏</b>",reply_markup=smart_builder(type="category", action="select_cat_for_remove_lot", back_type=1))
    elif callback_data.action == "list":
        await query.message.edit_text("–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤:",reply_markup=smart_builder(type="lot", action="list", back_type=1))
    else:
        await query.message.edit_text("–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=setup_lot_mk)

@router.message(AddLot.title)
async def add_lot_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await state.set_state(AddLot.price)
    await message.answer("–î–æ–±—Ä–µ, —Ç–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å <b>—Ü—ñ–Ω—É</b> —Ç–æ–≤–∞—Ä—É")

@router.message(AddLot.price)
async def add_lot_price(message: Message, state: FSMContext):
    if message.text.isdigit():
        await state.update_data(price=message.text)
        await state.set_state(AddLot.category)
        await message.answer("–î–æ–±—Ä–µ, —Ç–µ–ø–µ—Ä –≤–∏–±–µ—Ä—ñ—Ç—å <b>–∫–∞—Ç–µ–≥–æ—Ä—ñ—é</b> —Ç–æ–≤–∞—Ä—É", reply_markup=smart_builder(type="category", action="add_lot_category", back_type=1))
    else:
        await message.answer("–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ!")

@router.callback_query(AdminHandler.filter(F.value == "add_lot_category"))
async def add_lot_category(query: CallbackQuery, callback_data: AdminHandler, state: FSMContext):
    await state.update_data(category = callback_data.action)
    await query.message.edit_text("–í—ñ–¥–ø—Ä–∞–≤—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä—É:")

    await state.set_state(AddLot.image)

@router.message(AddLot.image, F.photo)
async def add_lot_image(message: Message, state: FSMContext):
    await state.update_data(image = message.photo[-1].file_id)
    items = await state.get_data()
    cur.execute("INSERT INTO lots (title, price, image_id, category) VALUES (?, ?, ?, ?)", (items["title"], items["price"], items["image"], items["category"]))
    con.commit()

    await message.answer_photo(photo=message.photo[-1].file_id, caption="\n".join([f"{key}: {item}" for key, item in (await state.get_data()).items()]))
    await state.clear()

@router.callback_query(AdminHandler.filter(F.value == "select_cat_for_remove_lot"))
async def enter_lot_remove(query: CallbackQuery, callback_data: AdminHandler):
    await query.message.edit_text("–î–æ–±—Ä–µ, —Ç–µ–ø–µ—Ä <b>–≤–∏–±–µ—Ä—ñ—Ç—å —Ç–æ–≤–∞—Ä</b> —è–∫–∏–π –ø–æ—Ç—Ä—ñ–±–Ω–æ <b>–≤–∏–¥–∞–ª–∏—Ç–∏</b>",reply_markup=smart_builder(type="lot_with_cat", action="remove", id=callback_data.action, back_type=1))

@router.callback_query(RemoveItems.filter(F.type == "lot_with_cat"))
async def remove_lot(query: CallbackQuery, callback_data: AdminHandler):
    remove_id = callback_data.id
    cur.execute("DELETE FROM lots WHERE id = ?", (remove_id,))
    con.commit()
    await query.message.edit_text("‚úÖ –í–∏ –≤–∏–¥–∞–ª–∏–ª–∏ —Ç–æ–≤–∞—Ä", reply_markup=back_mk)

@router.callback_query(AdminHandler.filter(F.value == "users"))
async def setup_users(query: CallbackQuery, callback_data: AdminHandler):
    await query.message.edit_text("–í–≤–µ–¥—ñ—Ç—å id –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", reply_markup=clear_state_mk)
    await query.answer()

@router.callback_query(AdminHandler.filter(F.value == "clear_state"))
async def clear_state(query: CallbackQuery, callback_data: AdminHandler, state: FSMContext):
    await state.clear()
    await query.message.edit_text("–°–∫–∞—Å–æ–≤–∞–Ω–æ")
    await query.answer()

@router.callback_query(AdminHandler.filter(F.value == "category_click"))
async def category_click(query: CallbackQuery, callback_data: AdminHandler):
    await query.answer()

@router.callback_query(AdminHandler.filter(F.value == "back"))
async def back(query: CallbackQuery, callback_data: AdminHandler):
    await query.message.edit_text("üëë –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å", reply_markup=admin_mk)
    await query.answer()